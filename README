myst
====

1) Install brew. run brew doctor and brew update.

2) Install NodeJS. Use homebrew: brew install nodejs

3) Install Memcache. Use homebrew again: brew install memcached.

4) Install MongoDB: http://mongodb.org/. I used Homebrew: brew install mongodb. Follow instructions at end of brew but note that if you want to run mongo automatically at start ignore the instructions to do so because we're going to write our own specific for Myst (see step 12)

5) Create folder to store node apps and clone this repo.

Steps 6 and 7 for development:

6) run: npm install -g express. "This installs some core Express functionality right into our Node installation, making it available globally so we can use it anywhere we want"

7) run: npm install -g express-generator. "As of Express 4.0, you'll need to install the express "generator" as well. This is following a trend in the node industry of breaking out core functionality from site-scaffolding utility"

8) Clone this repo.

9) I ignored a /data folder in the repo, this is where mongo will store its db files so create one now.

10) I also ignored a /logs folder in the repo. This is where mongo will put db logs. Create one as well

11) Create an empty mongo.log files in the /logs folder created above:  

Two options here for running mongo for Myst: either manually do it or if Mac, run it on startup: 

12 A: Manual) in data folder (created above) run: mongod --dbpath [apppath]/data. "You'll see the Mongo server start up. This is going to take a while if it's the first time, because it has to do some preallocating of space and a few other housekeeping tasks"

12 B: Auto) Before we begin, these instructions were written for Yosemite. I also found the graphical App called LaunchControl to be very helpful for managing startup tasks. It can be found at: http://www.soma-zone.com/download/.

Okay, we need to create a file in this location: /Library/LaunchDaemons/org.mongo.mongod.plist. To write to that location you'll need sudo access (dragging the file there will ask for you to authenticate) Give it this content (note the areas which are specific to where you cloned the app):

<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">  
<plist version="1.0">  
<dict>  
    <key>Label</key>
    <string>org.mongo.mongod</string>
    <key>RunAtLoad</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/local/bin/mongod</string>
        <string>--dbpath</string>
        <string>[full apppath from root]/data</string>
        <string>--logpath</string>
        <string>[full apppath from root]/logs/mongodb.log</string>
    </array>
</dict>  
</plist>

Now we need to tell OSX to run that file on startup with these three lines in Terminal:
sudo chown root:wheel /Library/LaunchDaemons/org.mongo.mongod.plist  //not sure this is a good idea? 
sudo launchctl load /Library/LaunchDaemons/org.mongo.mongod.plist  
sudo launchctl start org.mongo.mongod  

13) Set node env flag. If a production environment, set global var: export NODE_ENV=production

14) run: npm start. Myst is running. Double check port settings for access, default is 3000.

asset buliding notes
====

I constructed the game using the Myst iPhone data. They were pretty slack in protecting the content so I was able to rip all the images, audio and video. I was also able to parse game data form the incldued SQLite databases. To read about how this information was extracted and built, please refer to the following README files:

/panels/database/README         - about the conversion of SQLite to CSV and then Numbers Spreadsheets
/public/assets/audio/README     - using the OSX command "find" to convert all source audio files to mp3 with ffmpeg
