myst
====

These instruction were written for OSX. I both develop and serve apps with it :) At the time of writing Version 10.10, Yosemite.

1) Install brew. run brew doctor and brew update.

2) Install NodeJS. Use homebrew: brew install nodejs

3) Install Memcache. Use homebrew again: brew install memcached. Follow the instructions to have it run on startup.

4) Install MongoDB: http://mongodb.org/. I used Homebrew: brew install mongodb. Follow instructions at end of brew but note that if you want to run mongo automatically at start ignore the instructions to do so because we're going to write our own specific for Myst (see step 12)

5) Create folder to store node apps and clone this repo.

Steps 6 and 7 for development:

6) run: npm install -g express. "This installs some core Express functionality right into our Node installation, making it available globally so we can use it anywhere we want"

7) run: npm install -g express-generator. "As of Express 4.0, you'll need to install the express "generator" as well. This is following a trend in the node industry of breaking out core functionality from site-scaffolding utility"

8) Clone this repo.

9) I ignored a /data folder in the repo, this is where mongo will store its db files so create one now.

10) I also ignored a /logs folder in the repo. This is where mongo will put db logs. Create one as well

11) Create an empty mongo.log file in the /logs folder created above: sudo touch [app path]/logs/mongodb.log

Two options here for running mongo for Myst: either manually do it or run it on startup.

12 A: Manual) in data folder (created above) run: mongod --dbpath [apppath]/data. "You'll see the Mongo server start up. This is going to take a while if it's the first time, because it has to do some preallocating of space and a few other housekeeping tasks"

12 B: Auto) Before we begin, these instructions were written for Yosemite. I also found the graphical App called LaunchControl to be very helpful for managing startup tasks. It can be found at: http://www.soma-zone.com/download/.

Okay, we need to create a file in this location: /Library/LaunchDaemons/org.mongo.mongod.plist. To write to that location you'll need sudo access (dragging the file there will ask for you to authenticate) Give it this content (note the areas which are specific to where you cloned the app):

<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">  
<plist version="1.0">  
<dict>  
    <key>Label</key>
    <string>org.mongo.mongod</string>
    <key>RunAtLoad</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
        <string>/usr/local/bin/mongod</string>
        <string>--dbpath</string>
        <string>[full apppath from root]/data</string>
        <string>--logpath</string>
        <string>[full apppath from root]/logs/mongodb.log</string>
    </array>
</dict>  
</plist>

Now we need to tell OSX to run that file on startup with these three lines in Terminal:
sudo chown root:wheel /Library/LaunchDaemons/org.mongo.mongod.plist  //not sure this is a good idea? 
sudo launchctl load /Library/LaunchDaemons/org.mongo.mongod.plist  
sudo launchctl start org.mongo.mongod  

13) Set node env flag. If a production environment, set global var: export NODE_ENV=production

14) run: npm start. Myst is running. Double check port settings for access, default is 3000.

Application environment configuration
====

Open the ./config.js file. Here you will find various application-wide configuration settings. Ensure they make sense!

devmode -       a boolean flag which allows functionality within the app when in a development environment only (like the editor)
version -       We use a x.x.x.x version number the first three are defined in the config. the final value increments on each server restart. When the 
                client connects to the server and cached is an older version number, the client clears its cache (meaning that the client might have old data)
assetpath -     The full path ending in "/" were the game's assets are found. For development we use the local set but for production we might want to use
                a CDN

Setting up Apache to forward to nodejs
====

An easy to host a nodejs app (or maybe several?) is to still rely on Apache's powerful vhost configuration. 

1) Ensure Apache is stopped: sudo /usr/sbin/apachectl stop

2) Edit the main httpd.conf (/private/etc/apache2/httpd.conf) and enable the vhost file in the extras folder, by default it is commected out. 

3) Add these virtual hosts:

<VirtualHost *:80>
    DocumentRoot /var/www/example
</VirtualHost>

#Proxy to nodejs
<VirtualHost *:80>
    ServerName myst.crazyerics.com
    RewriteEngine on
    RewriteRule   ^/assets/(.+)  http://googledrive.com/host/0BxDpriCgWYk3VVRPMXhGdUs1R0k/public/assets/$1  [R,L]
    ProxyPreserveHost on
    ProxyPass / http://localhost:3000/
</VirtualHost>

Note the above is a very specific example for my own setup so adjust as needed. The first entry acts as a default for all traffic on port 80 that does not match my server name. Also note that I have a rewrite rule on for rerouting anything in the assets folder to my public Google Drive. I use it as a free CDN :) - be sure to only use that rule on your production box and be sure to update the Google Drive!!

4) Start up Apache: sudo /usr/sbin/apachectl start

If the above does not work, ensure mod_proxy.so is enabled in httpd.conf as well. For Yosemite is was enabled by default.

Using Google Drive as a CDN
====

I found it very useful to store all my assets on Google Drive and why not? It's a free 15GB and Myst in total is way smaller than that.

Realistically you're only going to enable this for a production environment, so on each push you'll need to update the Google Drive with the latest content. The best way I've found to do this is to download the app which links a local folder on your system to your Google Drive. After that, just use rsync to sync your asset folder with the one in the Google Drive folder:

rsync -avz  ~/Projects/expressjs-myst/public/ ~/Google\ Drive/expressjs-myst/public
OR
cp -R -v ~/Cloud/Projects/expressjs-myst/public ~/Google\ Drive/expressjs-myst/

You'll need to adjust the path's accordingly in the example above. -a is all files, -z compresses the files during transfer and -v is a verbose listing of the process.

Next be sure to include the rewrite rule in your virtual host listing as seen in the example above.

asset buliding notes
====

I constructed the game using the Myst iPhone data. They were pretty slack in protecting the content so I was able to rip all the images, audio and video. I was also able to parse game data form the incldued SQLite databases. To read about how this information was extracted and built, please refer to the following README files:

/panels/database/README         - about the conversion of SQLite to CSV and then Numbers Spreadsheets

building audio
====

Audio creation!

I first found all the audio sources I wanted to use from the iPhone collection. They were in “caf” format.

First I had to create directories for each audio file. I did this in terminal with the following where all the audio sources were stored. It creates folders in that same directory:

find ./ -name '*.caf' -exec sh -c 'mkdir "${0%%.caf}"' {} \;

ffmpeg used for the audio conversions. Note that I left ffmpeg in my downloads folder. you’ll have to adjust the paths if you do this again!

find ./ -name '*.caf' -exec sh -c '~/Downloads/ffmpeg -i "$0" "${0%%.caf}/${0%%.caf}.ogg"' {} \;
find ./ -name '*.caf' -exec sh -c '~/Downloads/ffmpeg -i "$0" "${0%%.caf}/${0%%.caf}.mp3"' {} \;

building video
====

I tried using ffmpeg to convert video, there's so many tutorials out there but honestly nothing has been easier then just using an online-conversion service (for free) to convert to mp4, ogg and webm: http://www.online-convert.com/
