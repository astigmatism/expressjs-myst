Follow along at: http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/

1) Install NodeJS. Use homebrew: brew install node

2) create folder to store node apps

3) run: npm install -g express. "This installs some core Express functionality right into our Node installation, making it available globally so we can use it anywhere we want"

4) run: npm install -g express-generator. "As of Express 4.0, you'll need to install the express "generator" as well. This is following a trend in the node industry of breaking out core functionality from site-scaffolding utility"

5) to create an express app run: express [appname]

6) modify package.json file with dependancies for mongodb:
{
  "name": "nodetest1",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www"
  },
  "dependencies": {
    "express": "~4.9.0",
    "body-parser": "~1.8.1",
    "cookie-parser": "~1.3.3",
    "morgan": "~1.3.0",
    "serve-favicon": "~2.1.3",
    "debug": "~2.0.0",
    "jade": "~1.6.0",
    "mongodb": "*",
    "monk": "*"
  }
}

7) go into folder and run: npm install. "It's going to print out a ton of stuff. That's because it's reading the JSON file we just edited and installing all the stuff listed in the dependencies object"

8) run: mkdir data. "we need to do one quick thing to prepare for setting up our database later"

9) run: npm start. "Note: in previous versions, you used "node app.js" -- this has been deprecated in favor of a skeletal build system"

10) is it running at http://localhost:3000

11) Install MongoDB: http://mongodb.org/. I used Homebrew: brew install mongodb

12) in data folder (created above) run: mongod --dbpath [apppath]/data. "You'll see the Mongo server start up. This is going to take a while if it's the first time, because it has to do some preallocating of space and a few other housekeeping tasks"

13) type mongo in new console window. "Don't worry about "connecting to: test" â€¦ that's just the default database Mongo decides to use if you don't specify one on the command line"

14) run: use [dbname]. "Now we're using the database "nodetest1." Like with "test", nothing actually exists yet."

15) add these lines to app.js. "These lines tell our app we want to talk to MongoDB, we're going to use Monk to do it, and our database is located at localhost:27017"

var mongo = require('mongodb');
var monk = require('monk');
var db = monk('localhost:27017/[dbname]');

16) optionally for development: npm install -g nodemon. "Monitor for any changes in your node.js application and automatically restart the server". Run it with "nodemon app.js". I haven't got this to work however :P

17) run: npm install async. "Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript"

18) run: npm install type-of-is. 

var Type = require('type-of-is');
Type(obj)           provides constructor type of an object
Type.string(obj)    provides type as String from {}.toString
Type.is(obj, type)  tests whether obj is of type (constructor or String)

19) run: npm install -S knuth-shuffle. var shuffle = require('knuth-shuffle');

20)) npm install memcached

21) npm install crypto? it might be available by default
var crypto = require('crypto');
var assert = require('assert');

var algorithm = 'aes256'; // or any other algorithm supported by OpenSSL
var key = 'password';
var text = 'I love kittens';

var cipher = crypto.createCipher(algorithm, key);  
var encrypted = cipher.update(text, 'utf8', 'hex') + cipher.final('hex');
var decipher = crypto.createDecipher(algorithm, key);
var decrypted = decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');

assert.equal(decrypted, text);

22) npm install traverse. https://github.com/substack/js-traverse

23) install fs-extra. I use this for remove directory and all files

24) npm install connect-multiparty. for file uplaods

** NOTES

What are clientidentity and serveridentity?

consider we have a default key for encrypting data that only the server knows.

userid -> default key = clientidentity. It's just the userid encrypted

serveridentity is a little more tricky. It is used to encrypted data in panels (like names and states). I could have used the default key, but then two different users, rather ALL users, would end up getting the same encrypted data. So I'll need to encrypt using a value specific to each user.. like.. their clientidentity. We can't encrypt using the clientidentity as a key however because its exposed to the client. So serveridentity is as follows using the same default key known only by the server:

userid -> server key = clientidentity 
clientidentity -> server key = serveridentity

We now have a completely unique value per user with encryption done by values only on the server.